import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import {
  Box,
  Heading,
  Input,
  Button,
  VStack,
  HStack,
  UnorderedList,
  ListItem,
  Alert,
  AlertIcon,
  Spinner,
} from "@chakra-ui/react";

const CompetencyFramework = () => {
  const [framework, setFramework] = useState({
    department: "",
    jobTitle: "",
    jobLevels: [],
    competencies: [],
  });
  const [jobLevelInput, setJobLevelInput] = useState("");
  const [competencyInput, setCompetencyInput] = useState("");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(null);
  const navigate = useNavigate();

  /** ‚úÖ Add Job Level */
  const addJobLevel = () => {
    if (!jobLevelInput.trim()) return;
    setFramework((prev) => ({
      ...prev,
      jobLevels: [...prev.jobLevels, jobLevelInput.trim()],
    }));
    setJobLevelInput("");
  };

  /** ‚úÖ Add Competency */
  const addCompetency = () => {
    if (!competencyInput.trim()) return;
    setFramework((prev) => ({
      ...prev,
      competencies: [...prev.competencies, { name: competencyInput.trim(), descriptions: {} }],
    }));
    setCompetencyInput("");
  };

  /** ‚úÖ Generate Competency Descriptions */
  const autoGenerateDescriptions = async () => {
    setError(null);
    setSuccess(null);

    if (!framework.department || !framework.jobTitle || !framework.jobLevels.length || !framework.competencies.length) {
      setError("‚ö†Ô∏è Please complete all fields and add at least one job level and competency.");
      return;
    }

    setLoading(true);

    try {
      const requestBody = {
        department: framework.department,
        jobTitle: framework.jobTitle,
        jobLevels: framework.jobLevels,
        competencies: framework.competencies.map((c) => c.name),
      };

      console.log("üîç Sending Request to Generate Competencies:", requestBody);

      const response = await fetch("https://interviewappbe-production.up.railway.app/api/generate-competencies", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(requestBody),
      });

      const data = await response.json();
      console.log("‚úÖ API Response:", data);

      if (!response.ok) {
        setError(`‚ùå Error: ${response.status} - ${data.detail || response.statusText}`);
        return;
      }

      // ‚úÖ Update Competency Descriptions
      setFramework((prev) => ({
        ...prev,
        competencies: prev.competencies.map((competency, index) => ({
          ...competency,
          descriptions: data.competencyDescriptions?.[index]?.levels || {},
        })),
      }));

      setSuccess("‚úÖ Descriptions generated successfully!");
    } catch (err) {
      console.error("‚ùå Error Generating Competencies:", err);
      setError("An unexpected error occurred. Please try again.");
    } finally {
      setLoading(false);
    }
  };

  /** ‚úÖ Save Competency Framework */
  const saveCompetencies = async () => {
    setLoading(true);
    setError(null);
    setSuccess(null);

    try {
      const requestBody = {
        department: framework.department,
        jobTitles: framework.jobLevels.map((jobLevel) => ({
          job_title: `${framework.jobTitle} ${jobLevel}`,
          job_levels: [jobLevel],
          competencies: framework.competencies.map((competency) => ({
            name: competency.name,
            descriptions: competency.descriptions,
          })),
        })),
      };

      console.log("üìå Saving Framework:", requestBody);

      const response = await fetch("https://interviewappbe-production.up.railway.app/api/save-competencies", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(requestBody),
      });

      const data = await response.json();

      if (!response.ok) {
        setError(`‚ùå Error: ${response.status} - ${data.detail || response.statusText}`);
        return;
      }

      setSuccess("‚úÖ Competency framework saved successfully!");
    } catch (err) {
      console.error("‚ùå Save Error:", err);
      setError("Failed to save framework.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <Box maxW="1000px" mx="auto" py="6">
      <Heading size="xl" textAlign="center" color="purple.600" mb="6">
        Competency Framework Generator
      </Heading>

      <VStack spacing="4" align="stretch">
        <Input
          placeholder="Department"
          value={framework.department}
          onChange={(e) => setFramework((prev) => ({ ...prev, department: e.target.value }))}
        />
        <Input
          placeholder="Job Title"
          value={framework.jobTitle}
          onChange={(e) => setFramework((prev) => ({ ...prev, jobTitle: e.target.value }))}
        />

        {/* Job Levels */}
        <Box>
          <Heading size="md" mb="2">Job Levels</Heading>
          <HStack>
            <Input placeholder="Add a job level" value={jobLevelInput} onChange={(e) => setJobLevelInput(e.target.value)} />
            <Button colorScheme="blue" onClick={addJobLevel}>Add</Button>
          </HStack>
          <UnorderedList mt="2">
            {framework.jobLevels.map((level, index) => <ListItem key={index}>{level}</ListItem>)}
          </UnorderedList>
        </Box>

        {/* Competencies */}
        <Box>
          <Heading size="md" mb="2">Competencies</Heading>
          <HStack>
            <Input placeholder="Add a competency" value={competencyInput} onChange={(e) => setCompetencyInput(e.target.value)} />
            <Button colorScheme="blue" onClick={addCompetency}>Add</Button>
          </HStack>
          <UnorderedList mt="2">
            {framework.competencies.map((competency, index) => <ListItem key={index}><strong>{competency.name}</strong></ListItem>)}
          </UnorderedList>
        </Box>
      </VStack>

      {/* Generate & Save Buttons */}
      <VStack mt="6">
        <Button
          colorScheme="purple"
          onClick={autoGenerateDescriptions}
          isLoading={loading}
          isDisabled={!framework.department || !framework.jobTitle}
        >
          {loading ? <Spinner size="sm" /> : "Generate Descriptions"}
        </Button>
        <Button
          colorScheme="green"
          onClick={saveCompetencies}
          isLoading={loading}
          isDisabled={!framework.competencies.length}
        >
          {loading ? <Spinner size="sm" /> : "Save Framework"}
        </Button>
      </VStack>

      {/* Messages */}
      {error && <Alert status="error" mt="4"><AlertIcon />{error}</Alert>}
      {success && <Alert status="success" mt="4"><AlertIcon />{success}</Alert>}
    </Box>
  );
};

export default CompetencyFramework;

