import React, { useState } from "react";
import "./CompetencyFrameworkPlanner.css";

const CompetencyFramework = () => {
  const [framework, setFramework] = useState({
    department: "",
    jobTitle: "",
    jobLevels: [],
    competencies: [],
  });
  const [jobLevelInput, setJobLevelInput] = useState("");
  const [competencyInput, setCompetencyInput] = useState("");
  const [generatedDescriptions, setGeneratedDescriptions] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const updateFramework = (key, value) => {
    setFramework((prev) => ({ ...prev, [key]: value }));
  };

  const addJobLevel = () => {
    if (jobLevelInput.trim()) {
      setFramework((prev) => ({
        ...prev,
        jobLevels: [...prev.jobLevels, jobLevelInput.trim()],
      }));
      setJobLevelInput("");
    }
  };

  const removeJobLevel = (index) => {
    setFramework((prev) => ({
      ...prev,
      jobLevels: prev.jobLevels.filter((_, i) => i !== index),
    }));
  };

  const addCompetency = () => {
    if (competencyInput.trim()) {
      setFramework((prev) => ({
        ...prev,
        competencies: [
          ...prev.competencies,
          { name: competencyInput.trim(), descriptions: {} },
        ],
      }));
      setCompetencyInput("");
    }
  };

  const removeCompetency = (index) => {
    setFramework((prev) => ({
      ...prev,
      competencies: prev.competencies.filter((_, i) => i !== index),
    }));
  };

  const autoGenerateDescriptions = async () => {
    setError(null);

    if (!framework.department || !framework.jobTitle || !framework.jobLevels.length || !framework.competencies.length) {
      setError("Please fill in all fields and add at least one job level and competency.");
      return;
    }

    setLoading(true);
    try {
      const response = await fetch(
        "https://interviewappbe-production.up.railway.app/api/generate-competencies",
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            department: framework.department,
            jobTitle: framework.jobTitle,
            jobLevels: framework.jobLevels,
            competencies: framework.competencies.map((c) => c.name),
          }),
        }
      );

      if (!response.ok) {
        setError(`Error: ${response.status} - ${response.statusText}`);
        setLoading(false);
        return;
      }

      const data = await response.json();

      if (data.success) {
        setGeneratedDescriptions(data.competencyDescriptions);
        setFramework((prev) => ({
          ...prev,
          competencies: prev.competencies.map((competency, index) => ({
            ...competency,
            descriptions: data.competencyDescriptions[index]?.levels || {},
          })),
        }));
      } else {
        setError("Failed to generate competency descriptions.");
      }
    } catch (err) {
      console.error("Error generating descriptions:", err);
      setError("An unexpected error occurred. Please try again.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="planner-container">
      <h1 className="planner-title">Competency Framework Generator</h1>

      {/* Form Inputs */}
      <div className="planner-form">
        <input
          type="text"
          placeholder="Department"
          value={framework.department}
          onChange={(e) => updateFramework("department", e.target.value)}
        />
        <input
          type="text"
          placeholder="Job Title"
          value={framework.jobTitle}
          onChange={(e) => updateFramework("jobTitle", e.target.value)}
        />

        {/* Job Levels Section */}
        <div className="input-group">
          <h3>Job Levels</h3>
          <div className="input-row">
            <input
              type="text"
              placeholder="Add a job level"
              value={jobLevelInput}
              onChange={(e) => setJobLevelInput(e.target.value)}
            />
            <button onClick={addJobLevel} className="add-button">
              Add
            </button>
          </div>
          <ul className="job-level-list">
            {framework.jobLevels.map((level, index) => (
              <li key={index} className="job-level-item">
                {level}{" "}
                <button onClick={() => removeJobLevel(index)} className="remove-button">
                  &times;
                </button>
              </li>
            ))}
          </ul>
        </div>

        {/* Competencies Section */}
        <div className="input-group">
          <h3>Competencies</h3>
          <div className="input-row">
            <input
              type="text"
              placeholder="Add a competency"
              value={competencyInput}
              onChange={(e) => setCompetencyInput(e.target.value)}
            />
            <button onClick={addCompetency} className="add-button">
              Add
            </button>
          </div>
          <ul className="competencies-list">
            {framework.competencies.map((competency, index) => (
              <li key={index} className="competency-item">
                <strong>{competency.name}</strong>{" "}
                <button onClick={() => removeCompetency(index)} className="remove-button">
                  &times;
                </button>
              </li>
            ))}
          </ul>
        </div>
      </div>

      {/* Generate Button */}
      <button
        onClick={autoGenerateDescriptions}
        disabled={loading || !framework.department || !framework.jobTitle}
        className="generate-button"
      >
        {loading ? "Generating..." : "Generate Descriptions"}
      </button>

      {error && <div className="error-message">{error}</div>}
      {loading && <div className="spinner">Loading...</div>}

      {/* Display Generated Descriptions */}
      <div className="result-section">
        <h2 className="result-title">Generated Competency Descriptions</h2>
        {framework.competencies.map((competency, index) => (
          <div className="competency-card" key={index}>
            <h3 className="competency-title">{competency.name}</h3>
            <div className="competency-levels">
              {Object.entries(competency.descriptions).map(([level, description]) => (
                <div key={level} className="competency-level">
                  <strong>{level}:</strong> <span>{description}</span>
                </div>
              ))}
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default CompetencyFramework;
